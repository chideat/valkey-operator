name: pr-pipeline

on:
  pull_request:
    branches-ignore:
      - dependabot/*

jobs:
  test:
    name: Test with Coverage
    runs-on: ubuntu-latest
    steps:
    - name: Set up Go
      uses: actions/setup-go@v6
      with:
        go-version: '1.24'

    - name: Check out code
      uses: actions/checkout@v5

    - name: Install dependencies
      run: |
        go mod download

    - name: Run Unit tests
      run: |
        make test

    - name: Install goveralls
      run: go install github.com/mattn/goveralls@latest

    - name: Send coverage
      env:
        COVERALLS_TOKEN: ${{ secrets.COVERALLS_REPO_TOKEN }}
      run: goveralls -coverprofile=coverage.txt -service=github

  build:
    name: Build and push Docker image
    if: "!startsWith(github.head_ref, 'dependabot/')"
    runs-on: ubuntu-latest

    steps:
    - name: Check out code
      uses: actions/checkout@v5
      with:
        fetch-depth: 0

    - name: Read version from file
      id: get_version
      run: |
        # 1. Fetch all tags
        git fetch --tags --force
        
        # 2. Get the latest tag name
        latest_tag=$(git tag --sort=-v:refname | head -n 1)
        
        # 3. Handle case where no tags exist
        if [ -z "$latest_tag" ]; then
          new_tag="v0.1.0"
        else
          echo "Latest tag found: $latest_tag"
          
          # 4. Remove 'v' prefix for processing
          if [[ $latest_tag == v* ]]; then
            prefix="v"
            version="${latest_tag#v}"
          else
            prefix=""
            version="$latest_tag"
          fi
          
          # 5. Split version into parts
          IFS='.' read -r major minor patch <<< "$version"
          
          # ----------------------------------------------------------- #
          # NEW: Default missing minor/patch versions to 0 for robustness
          minor=${minor:-0}
          patch=${patch:-0}
          # ----------------------------------------------------------- #
          
          # 6. Increment the patch version
          patch=$((patch + 1))
          
          # 7. Assemble the new tag
          new_tag="${prefix}${major}.${minor}.${patch}"
        fi

        echo "Calculated new tag: $new_tag"
        
        # 8. Set the new tag as a GitHub Action output
        echo "VERSION=$new_tag" >> "$GITHUB_ENV"

    - name: Get branch name
      id: get_branch
      run: |
        if [ "${{ github.event_name }}" == "pull_request" ]; then
          BRANCH_NAME=${{ github.head_ref }}
        else
          BRANCH_NAME=${GITHUB_REF#refs/heads/}
        fi
        # Replace special characters with hyphens, remove trailing hyphens, and convert to lowercase
        SANITIZED_BRANCH_NAME=$(echo "$BRANCH_NAME" | tr -cs '[:alnum:]' '-' | sed 's/[-_]//g' | tr '[:upper:]' '[:lower:]')
        echo "BRANCH_NAME=$SANITIZED_BRANCH_NAME" >> $GITHUB_ENV

    - name: Get short commit SHA
      id: get_commit
      run: echo "COMMIT_SHA=${GITHUB_SHA::7}" >> $GITHUB_ENV

    - name: Set up QEMU
      uses: docker/setup-qemu-action@v3

    - name: Docker Setup Buildx
      id: buildx
      uses: docker/setup-buildx-action@v3
      with:
        platforms: linux/amd64,linux/arm64

    - name: Github Package Login
      uses: docker/login-action@v3
      with:
        registry: ghcr.io
        username: ${{ github.repository_owner }}
        password: ${{ secrets.GH_TOKEN }}

    - name: Build and push Docker image
      uses: docker/build-push-action@v6
      with:
        file: ./Dockerfile
        context: .
        push: true
        tags: ghcr.io/${{ github.repository }}:${{ env.VERSION }}-${{ env.BRANCH_NAME }}.g${{ env.COMMIT_SHA }}
        platforms: linux/amd64,linux/arm64
