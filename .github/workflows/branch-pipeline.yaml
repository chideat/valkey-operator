name: branch-pipeline

on:
  push:
    branches:
      - main
      - release-*

jobs:
  test:
    name: Test with Coverage
    runs-on: ubuntu-latest
    steps:
    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: '1.23'

    - name: Check out code
      uses: actions/checkout@v4

    - name: Install dependencies
      run: |
        go mod download

    - name: Run Unit tests
      run: |
        make test

    - name: Install goveralls
      run: go install github.com/mattn/goveralls@latest

    - name: Send coverage
      env:
        COVERALLS_TOKEN: ${{ secrets.COVERALLS_REPO_TOKEN }}
      run: goveralls -coverprofile=coverage.txt -service=github

  build:
    name: Build and push Docker image
    runs-on: ubuntu-latest
    steps:
    - name: Check out code
      uses: actions/checkout@v4

    - name: Check for [skip ci] in commit messages or PR title
      id: check_skip_ci
      run: |
        if [[ "${{ github.event.head_commit.message }}" =~ \[skip\ ci\] ]] || [[ "${{ github.event.pull_request.title }}" =~ \[skip\ ci\] ]]; then
          echo "CI skip detected, exiting."
          exit 0
        fi

    - name: Generate tag
      id: get_tag
      run: |
        if [ "${GITHUB_REF##*/}" = "main" ]; then
          TAG_NAME="latest"
        else
          BRANCH_NAME="${GITHUB_REF#refs/heads/}"
          VERSION="${BRANCH_NAME#release-}"
          LARGEST_TAG=$(git tag --merged $BRANCH_NAME --sort=-v:refname | grep $VERSION | head -n 1)
          if [ -z "$LARGEST_TAG" ]; then
            # No existing tag found, use version from branch name with .0 patch version
            TAG_NAME="${VERSION}.0-${GITHUB_SHA::7}"
          else
            # Extract and increment patch version from existing tag
            if [[ $LARGEST_TAG =~ ^v?([0-9]+)\.([0-9]+)\.([0-9]+) ]]; then
              MAJOR=${BASH_REMATCH[1]}
              MINOR=${BASH_REMATCH[2]}
              PATCH=${BASH_REMATCH[3]}
              NEW_PATCH=$((PATCH + 1))
              if [[ $LARGEST_TAG =~ ^v ]]; then
                TAG_NAME="v${MAJOR}.${MINOR}.${NEW_PATCH}-${GITHUB_SHA::7}"
              else
                TAG_NAME="${MAJOR}.${MINOR}.${NEW_PATCH}-${GITHUB_SHA::7}"
              fi
            else
              # Fallback if tag format is unexpected
              TAG_NAME="${LARGEST_TAG}-${GITHUB_SHA::7}"
            fi
          fi
        fi
        echo "TAG_NAME=$TAG_NAME" >> $GITHUB_ENV

    - name: Set up QEMU
      uses: docker/setup-qemu-action@v3

    - name: Docker Setup Buildx
      id: buildx
      uses: docker/setup-buildx-action@v3
      with:
        platforms: linux/amd64,linux/arm64

    - name: Docker Login
      uses: docker/login-action@v3
      with:
        username: ${{ vars.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_TOKEN }}

    - name: GitHub Login
      uses: docker/login-action@v3
      with:
        registry: ghcr.io
        username: ${{ github.repository_owner }}
        password: ${{ secrets.GH_TOKEN }}

    - name: Build and push Docker image
      uses: docker/build-push-action@v6
      with:
        file: ./Dockerfile
        context: .
        push: true
        tags: |
          ${{ vars.DOCKER_USERNAME }}/valkey-operator:${{ env.TAG_NAME }}
          ghcr.io/${{ github.repository_owner }}/valkey-operator:${{ env.TAG_NAME }}
        platforms: linux/amd64,linux/arm64
