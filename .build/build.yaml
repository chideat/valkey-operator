apiVersion: builds.katanomi.dev/v1alpha1
kind: Build
spec:
  workspaces:
    - description: |
        This workspace is shared among all the pipeline tasks to read/write common resources
      name: source
    - name: config
  runTemplate:
    spec:
      workspaces:
        - name: config
          configmap:
            name: buildkitd-config
      taskRunSpecs:
        - pipelineTaskName: build-operator
          stepOverrides:
            - name: build
              resources:
                requests:
                  cpu: 2000m
                  memory: 4000Mi
                limits:
                  cpu: 3000m
                  memory: 6000Mi
        - pipelineTaskName: build-bundle
          stepOverrides:
            - name: build
              resources:
                requests:
                  cpu: 2000m
                  memory: 2048Mi
                limits:
                  cpu: 2000m
                  memory: 2048Mi
        - pipelineTaskName: generate-bundle
          stepOverrides:
            - name: update-version-data
              resources:
                requests:
                  cpu: 666m
                  memory: 1333Mi
                limits:
                  cpu: 2000m
                  memory: 4000Mi
            - name: generate-related-images
              resources:
                requests:
                  cpu: 666m
                  memory: 1333Mi
                limits:
                  cpu: 2000m
                  memory: 4000Mi
            - name: operator-bundle
              resources:
                requests:
                  cpu: 2000m
                  memory: 2048Mi
                limits:
                  cpu: 4000m
                  memory: 4096Mi
        - pipelineTaskName: go-test
          stepOverrides:
            - name: prepare
              resources:
                requests:
                  cpu: 100m
                  memory: 1000Mi
                limits:
                  cpu: 1500m
                  memory: 3000Mi
            - name: test
              resources:
                requests:
                  cpu: 2000m
                  memory: 2000Mi
                limits:
                  cpu: 3000m
                  memory: 4000Mi
            - name: analysis
              resources:
                requests:
                  cpu: 500m
                  memory: 1000Mi
                limits:
                  cpu: 1500m
                  memory: 3000Mi
  tasks:
    - name: versions
      params:
        - name: version-docker
          value: $(build.git.version.docker)
        - name: version-clean
          value: $(build.git.version.clean)
        - name: revision
          value: $(build.git.revision)
        - name: revision-id
          value: $(build.git.revision.id)
        - name: shortID
          value: $(build.git.lastCommit.shortID)
      taskSpec:
        params:
          - name: version-docker
            type: string
          - name: version-clean
            type: string
        results:
          - name: version-custom
            description: adjusted version
          - name: version-clean-custom
            description: adjusted version
        steps:
          - name: replace
            image: build-harbor.alauda.cn/ops/alpine:3.21
            imagePullPolicy: IfNotPresent
            script: |
              #!/bin/sh
 
              set -x

              ts="$(date "+%m%d%H%M")"
              version=$(params.version-docker)
              cversion=$(params.version-clean)
              revision=$(params.revision)
              revision_id=$(params.revision-id)
              shortID=$(params.shortID)
              if echo -n "${revision}" | grep -q "refs/tags/"; then
                  version=${revision_id}
                  cversion=${revision_id#v}
              elif echo -n "${revision}" | grep -q "refs/heads/release-"; then
                  if echo "$version" | grep -Eq "^v?[0-9]+\.[0-9]+\.[0-9]+$"; then
                      version="${version}-rc.d${ts}.${shortID}"
                      cversion=${version#v}
                  fi
              fi
              echo -n "version: "
              echo -n "${version}" | tee $(results.version-custom.path)
              echo ""
              echo -n "cversion: "
              echo -n "${cversion}" | tee $(results.version-clean-custom.path)
    - name: go-test
      runAfter:
        - versions
      timeout: 30m
      retries: 0
      taskRef:
        kind: ClusterTask
        name: go-unit-test
      workspaces:
        - name: source
          workspace: source
      params:
        - name: command
          value: |-
            export GOPROXY="https://goproxy.cn,https://build-nexus.alauda.cn/repository/golang/,direct"
            export GONOSUMDB="gitlab-ce.alauda.cn/*,gomod.alauda.cn/*,bitbucket.org/mathildetech/*,gopkg.in/*"
            make test
        - name: coverage-report-path
          value: ./coverage.txt
        - name: quality-gate
          value: "false"
        - name: tool-image
          value: docker-mirrors.alauda.cn/library/golang:1.24
    - name: code-scan
      runAfter:
        - go-test
      timeout: 30m
      retries: 0
      taskRef:
        kind: ClusterTask
        name: sonarqube-analysis
      workspaces:
        - name: source
          workspace: source
      params:
        - name: server
          value: https://build-sonar.alauda.cn
        - name: quality-gate
          value: "false"
    - name: build-operator
      runAfter:
        - versions
      timeout: 30m
      retries: 3
      taskRef:
        kind: ClusterTask
        name: alauda-build-image
      workspaces:
        - name: source
          workspace: source
      params:
        - name: container-image
          value: build-harbor.alauda.cn/middleware/valkey-operator
        - name: container-image-tag
          value: $(tasks.versions.results.version-custom)
        - name: labels
          value:
            - branch=$(build.git.branch.name)
            - commit=$(build.git.lastCommit.id)
    - name: e2e-image
      runAfter:
        - versions
      timeout: 30m
      retries: 3
      taskRef:
        kind: ClusterTask
        name: alauda-build-image
      workspaces:
        - name: source
          workspace: source
      params:
        - name: container-image
          value: build-harbor.alauda.cn/middleware/valkey-operator-e2e
        - name: container-image-tag
          value: $(tasks.versions.results.version-custom)
        - name: labels
          value:
            - branch=$(build.git.branch.name)
            - commit=$(build.git.lastCommit.id)
        - name: dockerfile
          value: Dockerfile.e2e

    ########## build bundle ##########
    - name: generate-bundle
      runAfter:
        - versions
      timeout: 30m
      retries: 3
      taskRef:
        kind: ClusterTask
        name: alauda-operator-bundle
      workspaces:
        - name: source
          workspace: source
      params:
        - name: tools-image
          value: registry.alauda.cn:60080/fundamentals/operator-builder:master-1.24
        - name: set-skip-range
          value: ">=0.0.0 <$(tasks.versions.results.version-clean-custom)"
        - name: build-command
          value: |
            export GONOSUMDB="gopkg.in/*"
            rm -rf /usr/local/bin/operator-sdk /go/bin/operator-sdk $(pwd)/bin/operator-sdk && make operator-sdk && chmod +x $(pwd)/bin/operator-sdk && make bundle
        - name: controller-version
          value: $(tasks.versions.results.version-custom)
        - name: bundle-version
          value: $(tasks.versions.results.version-clean-custom)
        - name: csv-file-path
          value: config/manifests/bases/valkey-operator.clusterserviceversion.yaml
        - name: bundle-csv-file-path
          value: bundle/manifests/valkey-operator.clusterserviceversion.yaml
        - name: controller-values-filepath
          value: values.yaml
        - name: controller-values-jsonpath
          value: global.images.valkey-operator.tag
    - name: build-bundle
      runAfter:
        - generate-bundle
      timeout: 30m
      retries: 3
      taskRef:
        kind: ClusterTask
        name: alauda-build-image
      workspaces:
        - name: source
          workspace: source
      when: [ ]
      params:
        - name: container-image
          value: build-harbor.alauda.cn/middleware/valkey-operator-bundle
        - name: container-image-tag
          value: $(tasks.versions.results.version-custom)
        - name: dockerfile
          value: bundle.Dockerfile
        - name: labels
          value:
            - app_version=$(build.git.branch.name)
            - branch=$(build.git.branch.name)
            - commit=$(build.git.lastCommit.id)
        - name: set-skip-range
          value: ">=0.0.0 <$(tasks.versions.results.version-clean-custom)"
        - name: controller-version
          value: $(tasks.versions.results.version-custom)
        - name: bundle-version
          value: $(tasks.versions.results.version-clean-custom)
        - name: csv-file-path
          value: config/manifests/bases/valkey-operator.clusterserviceversion.yaml
        - name: bundle-csv-file-path
          value: bundle/manifests/valkey-operator.clusterserviceversion.yaml
        - name: controller-values-filepath
          value: values.yaml

    ########## violet ##########
    - name: violet-base
      timeout: 30m
      retries: 0
      taskRef:
        resolver: katanomi.hub
        params:
          - name: kind
            value: task
          - name: name
            value: build-image-buildkit
      workspaces:
        - name: source
          workspace: source
        - name: cache
          workspace: source
      when: [ ]
      params:
        - name: reuse-image
          value: "true"
        - name: cache-major-branches
          value: "false"
        - name: container-images
          value:
            - build-harbor.alauda.cn/middleware/valkey-operator-violet-base:latest
        - name: context
          value: violet
        - name: dockerfile
          value: violet/base.Dockerfile
    - name: violet-package
      timeout: 30m
      retries: 3
      taskRef:
        resolver: katanomi.hub
        params:
          - name: kind
            value: task
          - name: name
            value: build-image-buildkit
      workspaces:
        - name: source
          workspace: source
        - name: cache
        - name: config
      runAfter:
        - violet-base
        - build-operator
        - build-bundle
      when: [ ]
      params:
        - name: container-images
          value:
            - build-harbor.alauda.cn/middleware/valkey-operator-violet:$(tasks.versions.results.version-custom)
        - name: cache-major-branches
          value: "false"
        - name: context
          value: violet
        - name: extra-args
          value: >
            --opt build-arg:TAG=$(tasks.versions.results.version-custom)
            --opt build-arg:LEVEL=s3
        - name: dockerfile
          value: violet/violet.Dockerfile
